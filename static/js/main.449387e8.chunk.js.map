{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","img/trackerbanner.png","App.jsx","index.jsx","components/Cards/Cards.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","StylesProvider","container","Grid","spacing","justify","item","component","Card","xs","md","cx","styles","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","console","log","fetchDailyData","splice","length","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","image","src","Banner","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.449387e8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__27xMd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2QOun\"};","import React from 'react'\r\nimport { Card, CardContent, Typography, Grid, StylesProvider } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nimport styles from \"./Cards.module.css\";\r\n\r\nfunction Cards({ data: { confirmed, recovered, deaths, lastUpdate } }) {\r\n    if (!confirmed) {\r\n        return 'Loading...';\r\n    }\r\n    return (\r\n        <div className={StylesProvider.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\"\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n\r\n    if (country) {\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n        const modifiedData = { confirmed, recovered, deaths, lastUpdate }\r\n        return modifiedData;\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        data.splice(0, data.length - 30)\r\n        const modifiedData = data.map(dailyData => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }));\r\n\r\n        return modifiedData;\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: { countries } } = await axios.get(`${url}/countries`);\r\n\r\n        return countries.map((country) => country.name);\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport styles from \"./Chart.module.css\";\r\n\r\nfunction Chart({ data: { confirmed, deaths, recovered }, country }) {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length !== 0\r\n        ? \r\n            <Line \r\n                data={{\r\n                    labels: dailyData.map(({ date }) => date),\r\n                    datasets: [{\r\n                        data: dailyData.map(({ confirmed }) => confirmed),\r\n                        label: \"Infected\",\r\n                        borderColor: \"#150e56\",\r\n                        fill: true\r\n                    }, \r\n                    {\r\n                        data: dailyData.map(({ deaths }) => deaths),\r\n                        label: \"Deaths\",\r\n                        borderColor: \"#7b113a\",\r\n                        backgroundColor: \"rgba(255, 0, 0, 0.05)\",\r\n                        fill: true\r\n                    }]\r\n                }}\r\n            />\r\n        :\r\n            null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed\r\n        ?\r\n            (\r\n                <Bar \r\n                    data={{\r\n                        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n                        datasets: [{\r\n                            label: \"People\",\r\n                            backgroundColor: [\r\n                                \"#150e56\",\r\n                                \"#1597bb\",\r\n                                \"#7b113a\"\r\n                            ],\r\n                            data: [confirmed.value, recovered.value, deaths.value]\r\n                        }]\r\n                    }}\r\n                    options={{\r\n                        legend: { display: false },\r\n                        title: { display: true, text: `Current state in ${country}`}\r\n                    }}\r\n                />\r\n            )\r\n        :\r\n            null\r\n    )\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","import React, { useState, useEffect } from 'react'\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\n\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nfunction CountryPicker({ handleCountryChange }) {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker\r\n","export default __webpack_public_path__ + \"static/media/trackerbanner.9e5d4fc7.png\";","import React from \"react\";\r\n\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport styles from \"./App.module.css\";\r\nimport { fetchData } from \"./api\";\r\n\r\nimport Banner from \"./img/trackerbanner.png\"\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        data: {},\r\n        country: ''\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const fetchedData = await fetchData(this.country);\r\n\r\n        this.setState({ data: fetchedData });\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country);\r\n\r\n        this.setState({ data: fetchedData, country: country });\r\n    }\r\n\r\n    render() {\r\n        const { data, country } = this.state;\r\n\r\n        return (\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={Banner} alt=\"COVID-19\" />\r\n                <Cards data={data} />\r\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n                <Chart data={data} country={country} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__VMzsV\",\"card\":\"Cards_card__eA2NH\",\"infected\":\"Cards_infected__1yvHj\",\"recovered\":\"Cards_recovered__3_OPH\",\"deaths\":\"Cards_deaths__YKTrg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2vRpl\",\"image\":\"App_image__3ORvM\"};"],"sourceRoot":""}